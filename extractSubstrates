# PURPOSE: Load in a file (fastq or fasta), extract substrate sequences, and count AA
           # occurrences at each position in the substrates
    
# IMPORTANT: File names must include information regarding the direction of expression
    # Forward Read: denoted by "R1"
    # Reverse Read: denoted by "R2"



import pickle as pic
from functions import NGS



# ========================================= User Inputs =========================================
# Input 1: File Location Information
inFilePath = r''  # Define file pathway
inFileName = ['Mpro2-I_S1_L001_R1_001', 'Mpro2-Mpro2-I_S1_L001_R2_001'] # Define file name(s)
inFileType = 'fastq' # Define the type of file that contains your data
inSavePath = r''
inSaveFileName = 'Mpro2-I_S1_L001'

# Input 2: Substrate Parameters
inEnzymeName = 'Mpro2'
inSubstrateLength = 8  # Define the length of your substrate

# Input 3: Define Variables Used To Extract The Substrates
inPrintSubstrateNumber = 10 # Print peptide sequences to validate substrate extraction
inStartSeqR1 = 'KGS' # Define sequences that flank your substrate
inEndSeqR1 = 'GGSGG'
inStartSeqR2 = 'KGS'
inEndSeqR2 = 'GGSGG'

# Input 4: Plotting The Data
inPrintCounts = True
inPlotCounts = True
inFigureTitleSize = 18
inFigureLabelSize = 15
inCountMapYLabel = 0  # 0 for full Residue name, 1 for 3-letter code, 2 for 1 letter
inAAPositions = ['R1', 'R2', 'R3', 'R4', 'R5', 'R6',  'R7', 'R8']
inCountsColorMap = ['white', 'white', '#F79620', '#F79620', '#F79620', '#BF5700', '#BF5700']

# Input 8: Figure Dimensions
inFigureSize = (10, 8) # (width, height)
inFigureBorders = [0.94, 0.075, 0.17, 1] # Top, bottom, left, right


# ======================================= Initialize Class =======================================
ngs = NGS(enzymeName=inEnzymeName, substrateLength=inSubstrateLength,
          colorsEM=inCountsColorMap, colorsMotif=None, xAxisLabels=inAAPositions, 
          residueLabelType=inCountMapYLabel, titleLabelSize=inFigureTitleSize, 
          axisLabelSize=inFigureLabelSize, printNumber=inPrintSubstrateNumber)


# ========================================= RUN THE CODE =========================================
# Initialize substrate dictionary
substrates = {}

# Extract the substrates
for fileName in inFileName:
    if '_R1_' in fileName:
        substrates = ngs.loadAndTranslate(filePath=inFilePath, fileName=fileName,
                                          fileType=inFileType, startSeq=inStartSeqR1,
                                          endSeq=inEndSeqR1)
    elif '_R2_' in fileName:
        substrates = ngs.loadAndTranslate(filePath=inFilePath, fileName=fileName,
                                          fileType=inFileType, startSeq=inStartSeqR2,
                                          endSeq=inEndSeqR2)

# Count the occurrences of each residue
counts, totalSubs = ngs.countResidues(substrates=substrates, printCounts=inPrintCounts)

# Save the data
savePathSubstrate = inSavePath+'\\substrates_'+inSaveFileName
with open(savePathSubstrate, 'wb') as file:
    pic.dump(substrates, file)
savePathCounts = inSavePath+'\\counts_'+inSaveFileName
with open(savePathCounts, 'wb') as file:
    pic.dump(counts, file)

# Print saved file locations
print('================================== Saving The Data ==================================')
print(f'Data saved at:')
print(f'    {savePathSubstrate}')
print(f'    {savePathCounts}\n')


# Plot the data
if inPlotCounts:
    ngs.plotCounts(countedData=counts, figSize=inFigureSize, figBorders=inFigureBorders,
                   fileName=inSaveFileName)
