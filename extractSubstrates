# PURPOSE: Load in a file (fastq or fasta), extract substrate sequences, and count AA
           # occurrences at each position in the substrates
    
# IMPORTANT: File names must include information regarding the direction of expression
    # Forward Read: denoted by "R1"
    # Reverse Read: denoted by "R2"


import pickle as pic
from functions import NGS



# ========================================= User Inputs =========================================
# Input 1: File Location Information
inFilePath = r''  # Define file pathway
inFileName = ['Mpro1_R4_S3_L004_R2_001'] # Define file name(s) 'Mpro1_R4_S3_L004_R1_001',
inFileType = 'fasta' # Define the type of file that contains your data
inSavePath = r''
inSaveFileName = 'Mpro1_R4_S3_L004'

# Input 2: Substrate Parameters
inEnzymeName = 'Mpro'
inSubstrateLength = 8  # Define the length of your substrate

# Input 3: Define Variables Used To Extract The Substrates
inPrintNumberOfSubstrates = 10 # Print peptide sequences to validate substrate extraction
inStartSeqR1 = 'KGS' # Define sequences that flank your substrate
inEndSeqR1 = 'GGSGG'
inStartSeqR2 = 'KGS'
inEndSeqR2 = 'GGSGG'

# Input: Plotting The Data
inPlotTitleSize = 18
inPlotLabelSize = 15
inPrintCounts = True
inPlotCounts = True
inCountMapYLabel = 0  # 0 for full Residue name, 1 for 3-letter code, 2 for 1 letter
inAAPositions = ['R1', 'R2', 'R3', 'R4', 'R5', 'R6',  'R7', 'R8']
inCountsColorMap = ['white', 'white', 'lightcoral', 'red', 'red', 'firebrick', 'firebrick',
                    'darkred']


# ====================================== Setup Residue List ======================================
residues = None # Set = None, if you are using the standard 20 AA


# ======================================= Initialize Class =======================================
ngs = NGS(enzymeName=inEnzymeName, substrateLength=inSubstrateLength, colors=inCountsColorMap,
          xAxisLabels=inAAPositions, AA=residues, residueLabelType=inCountMapYLabel,
          titleLabelSize=inPlotTitleSize, axisLabelSize=inPlotLabelSize,
          printNumber=inPrintNumberOfSubstrates)


# ========================================= RUN THE CODE =========================================
# Extract the substrates
substrates = []  # Initialize list used to record AA sequences

for fileName in inFileName:
    if '_R1_' in fileName:
        # Define AA sequences that flank your substrate
        startSeq = inStartSeqR1
        endSeq = inEndSeqR1

        extractedSequences = ngs.loadAndTranslate(filePath=inFilePath, fileName=fileName,
                                                  fileType=inFileType,
                                                  startSeq=startSeq, endSeq=endSeq)
        substrates.extend(extractedSequences)

    elif '_R2_' in fileName:
        # Define AA sequences that flank your substrate
        startSeq = inStartSeqR2
        endSeq = inEndSeqR2

        extractedSequences = ngs.loadAndTranslate(filePath=inFilePath, fileName=fileName,
                                                  fileType=inFileType,
                                                  startSeq=startSeq, endSeq=endSeq)
        substrates.extend(extractedSequences)

# Save substrates
savePathSubstrate = inSavePath+'\\substrates_'+inSaveFileName
with open(savePathSubstrate, 'wb') as file:
    pic.dump(substrates, file)


# Count the occurrences of each residue
counts, totalSubs = ngs.countResidues(substrates=substrates, printCounts=inPrintCounts)

# Save the counted data
savePathCounts = inSavePath+'\\counts_'+inSaveFileName
with open(savePathCounts, 'wb') as file:
    pic.dump(counts, file)


# Print saved file locations
print('================================== Saving The Data ==================================')
print(f'Data saved at:')
print(f'    {savePathSubstrate}')
print(f'    {savePathCounts}\n')


# Plot the data
if inPlotCounts:
    ngs.plotCounts(countedData=counts, fileName=inSaveFileName)
