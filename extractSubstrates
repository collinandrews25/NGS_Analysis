# PURPOSE: Load in a file (fastq or fasta), extract substrate sequences, and count AA
           # occurrences at each position in the substrates
    # IMPORTANT: File names must include information regarding the direction of expression
        # Forward Read: denoted by "R1"
        # Reverse Read: denoted by "R2"


import pickle as pic
from functionsNGS import NGS


# ========================================= User Inputs =========================================

# INPUT 1: Extract Substrates
inExtractSubstrates = 1 # Set

# File Location Information
inFilePath = 'C:\\Users\\ca34522\\Documents\\NGS\\Mpro\\fasta'  # Define file pathway
inFileName = ['Mpro1_I_S1_L001_R1_001', 'Mpro1_I_S1_L001_R2_001'] # Define file name(s)
inSaveFileName = 'Mpro1_I_S1_L002'
inSavePath = 'C:\\Users\\ca34522\\Documents\\NGS\\Mpro\\dataNGS'
inFileType = 'fasta' # Define the type of file that contains your data

# Input 2: Substrate parameters
inSubstrateLength = 8  # Define the length of the substrate

# Input 3: Define variables used to extract the substrate
inPrintNumberOfSubstrates = 10 # Print peptide sequences to validate substrate extraction
inStartSeqR1 = 'KGS' # Define sequences that flank
inEndSeqR1 = 'GGSGG'
inStartSeqR2 = 'KGS'
inEndSeqR2 = 'GGSGG'

# Input: Plotting the data
inPrintCounts = 1
inPlotCounts = 1
inPlotLabelSize = 15
inPlotTitleSize = 18
inPrintResideName = 1 # Set = 1, to print the full residue name on the plot
inAAPositions = ['R1', 'R2', 'R3', 'R4', 'R5', 'R6',  'R7', 'R8']
inCountsColorMap = ['white', 'tomato', 'red', 'red', 'firebrick', 'firebrick', 'darkred']  # Define the colors for the colormap


# ====================================== Setup Residue List ======================================
residues = None # Set = None, if you are using the standard 20 AA


# ========================================= RUN THE CODE =========================================
# Initialize the NGS class
ngs = NGS(substrateLength=inSubstrateLength, AA=residues, printNumber=inPrintNumberOfSubstrates)


if inExtractSubstrates == 1:
    # Extract the substrates
    substrates = []  # Initialize list used to record AA sequences

    for fileName in inFileName:
        if '_R1_' in fileName:
            # Define AA sequences that flank your substrate
            startSeq = inStartSeqR1
            endSeq = inEndSeqR1

            extractedSequences = ngs.loadAndTranslate(filePath=inFilePath, fileName=fileName,
                                                      fileType=inFileType,
                                                      startSeq=startSeq, endSeq=endSeq)
            substrates.extend(extractedSequences)

        elif '_R2_' in fileName:
            # Define AA sequences that flank your substrate
            startSeq = inStartSeqR2
            endSeq = inEndSeqR2

            extractedSequences = ngs.loadAndTranslate(filePath=inFilePath, fileName=fileName,
                                                      fileType=inFileType,
                                                      startSeq=startSeq, endSeq=endSeq)

            substrates.extend(extractedSequences)

    # Determine the total number of Substrates
    print('=================================== Total Substrates ================================='
          '==')
    totalSubstrates = len(substrates)
    print(f'Total number of Substrates: {totalSubstrates}')
    print('')
    print('')


    # Save substrates
    savePathSubstrate = inSavePath+'\\substrates_'+inSaveFileName
    with open(savePathSubstrate, 'wb') as file:
        pic.dump(substrates, file)


# Count the occurrences of each residue
counts = ngs.countResidues(subs=substrates, printCounts=inPrintCounts, totalSubs=totalSubstrates)

# Save counts
savePathCounts = inSavePath+'\\counts_'+inSaveFileName
with open(savePathCounts, 'wb') as file:
    pic.dump(counts, file)


# Print saved file locations
print('==================================== Saving The Data ====================================')
print(f'Data saved at:')
print(f'    {savePathSubstrate}')
print(f'    {savePathCounts}')
print('')


# Plot the data
if inPlotCounts == 1:
    ngs.plotCounts(countedData=counts, colors=inCountsColorMap, xAxisLables=inAAPositions,
                   yAxisLableType=inPrintResideName, titleLabelSize=inPlotTitleSize,
                   axisLabelSize=inPlotLabelSize, fileName=inSaveFileName)
