# PURPOSE: This code will load in your extracted substrates for processing

# IMPORTANT: Process all of your data with extractSubstrates before using this script



import os
import sys
import pickle as pic
from functions import NGS



# ========================================= User Inputs =========================================
# Input 1: File Location Information
inFilePath = r''  # Define file pathway
inInitialSortFileNames = ['Mpro2-I_S1_L001', 'Mpro2-I_S1_L002',
                         'Mpro2-I_S1_L003', 'Mpro2-I_S1_L004']  # Define file name(s)
inFinalSortFileNames = ['Mpro2-R4_S3_L001', 'Mpro2-R4_S3_L002',
                        'Mpro2-R4_S3_L003', 'Mpro2-R4_S3_L004']  # Define file name(s)
inFileType = ''  # Define the type of file that contains your data
inSavePath = r''


# Input 2: Experimental Parameters
inEnzymeName = 'Mpro2'
inSubstrateLength = 8  # Define the length of the substrate


# Input 3: Computational Parameters
inFixResidues = False # True: fix residues in the substrate, False: plot raw NGS data
inFixedResidue = ['L', 'Q'] # Define what residue(s) you wish to select as a list of strings
inFixedPosition = [3, 4] # Define position(s) in the substrate to fix
inAAPositions = ['P4', 'P3', 'P2', 'P1', str("P1'"), str("P2'"), str("P3'"), str("P4'")]
inFigureTitleSize = 18
inFigureLabelSize = 15


# Input 4: Processing The Data
inPrintCounts = True
inPrintRF = True
inPrintProb = True
inCodonSequence = 'NNS' # Base probabilities of degenerate codons (can be N, S, or K)
inUseCodonProb = False # If True: use "inCodonSequence" for baseline probabilities
                      # If False: use "inInitialSortFileNames" for baseline probabilities

# Input 5: Plot Heatmap
inFigureEnrichmentMap = True
inFigureEnrichmentScores = False
inFigureEnrichmentAsSquares = False
inTitleEnrichmentMap = inEnzymeName
inYLabelEnrichmentMap = 2 # 0 for full Residue name, 1 for 3-letter code, 2 for 1 letter
inPrintSelectedSubstrates = 1 # Set = 1, to print substrates with fixed residue
inPrintSubstrateNumber = 10 # Print this many fixed substrates
inEnrichmentColorMap = ['navy', 'royalblue', 'dodgerblue', 'lightskyblue', 'white', 'white',
                        'lightcoral', 'red', 'firebrick', 'darkred']


# Input 6: Plot Sequence Motif
inFigureWeblogoMotif = True 
inFigureNegativeWeblogoMotif = False
inFigureLogRatioMotif = False
inTitleMotif = inEnzymeName
inYLabelMotif = 'Bits'
inBigLettersOnTop = True
inLetterColors = ['darkgreen', 'firebrick', 'deepskyblue', 'pink', 'navy', 'black', 'gold']
                  # Aliphatic, Acidic,  Basic, Hydroxyl, Amide, Aromatic, Sulfur


# Input 7: Rank Fixed Substrates
inRankFixedSubstrates = True
inRankInitialSort = True
inPrintRankedSubstrateNumber = 10


# Input 8: Figure Dimensions
inFigureSize = (9.5, 8) # (width, height)
inFigureBorders = [0.94, 0.075, 0.117, 0.998] # Top, bottom, left, right
inFigureSizeAsSquares = (4.5, 8)
inFigureBordersAsSquares = [0.94, 0.075, 0.075, 0.943]
inFigureSizeMotif = (9.5, 8)
inFigureBordersMotif = [0.94, 0.075, 0.10, 0.98]


# ==================================== Setup Figure Parameters ===================================
if inFigureEnrichmentAsSquares:
    # Set figure dimension when plotting EM plots as squares
    figSizeEM = inFigureSizeAsSquares
    figBordersEM = inFigureBordersAsSquares
else:
    # Set figure dimension when plotting EM plots as rectangles
    figSizeEM = inFigureSize
    figBordersEM = inFigureBorders


# ======================================= Initialize Class =======================================
if inFixResidues:
    ngs = NGS(enzymeName=inEnzymeName, substrateLength=inSubstrateLength,
              colorsEM=inEnrichmentColorMap, colorsMotif=inLetterColors,
              xAxisLabels=inAAPositions, residueLabelType=inYLabelEnrichmentMap,
              titleLabelSize=inFigureTitleSize, axisLabelSize=inFigureLabelSize,
              printNumber=inPrintSubstrateNumber)
else:
    ngs = NGS(enzymeName=inEnzymeName, substrateLength=inSubstrateLength,
              colorsEM=inEnrichmentColorMap, colorsMotif=inLetterColors,
              xAxisLabels=inAAPositions, residueLabelType=inYLabelEnrichmentMap,
              titleLabelSize=inFigureTitleSize, axisLabelSize=inFigureLabelSize,
              printNumber=None)


# ========================================= Run The Code =========================================
# Load the data: initial sort
filePaths = []
if '/' in inFilePath:
    for fileName in inInitialSortFileNames:
        filePaths.append(f'{inFilePath}/counts_{fileName}')
else:
    for fileName in inInitialSortFileNames:
        filePaths.append(f'{inFilePath}\\counts_{fileName}')

# Verify that all files exist
fileFound = True
indexMissingFile = []
for indexFile, path in enumerate(filePaths):
    if os.path.exists(path):
        continue
    else:
        fileFound = False
        indexMissingFile.append(indexFile)

if fileFound:
    initialCounts, totalInitialSubs = ngs.loadCounts(filePath=filePaths,
                                                     files=inInitialSortFileNames,
                                                     printLoadedData=inPrintCounts,
                                                     fileType='Initial Sort')
    # Calculate RF
    initialRF = ngs.calculateRF(counts=initialCounts, N=totalInitialSubs,
                                fileType='Initial Sort', printRF=inPrintRF)
else:
    print('\033[91mERROR: File not found at path:')
    for indexMissing in indexMissingFile:
        print(filePaths[indexMissing])
    print(f'\nMake sure your path is correctly named, and that you have already extracted and '
          f'counted your NGS data\n\n')
    sys.exit()


if inFixResidues:
    fixedFinalSubs = []
    fixedSubSeq = ngs.fixSubstrateSequence(fixAA=inFixedResidue, fixPosition=inFixedPosition)

    if '/' in inFilePath:
        filePath = f'{inFilePath}/counts_{inEnzymeName}_FinalSort_Fixed_{fixedSubSeq}'
    else:
        filePath = f'{inFilePath}\\counts_{inEnzymeName}_FinalSort_Fixed_{fixedSubSeq}'

    # Verify that all files exist
    if os.path.exists(filePath):
        print(f'File found at path:\n     {filePath}\n\n')
        # Load the data
        with open(filePath, 'rb') as file:
            fixedFinalCounts = pic.load(file)
            print(f'Fixed Counts:\n{fixedFinalCounts}\n')

        totalFixedFinalCounts = sum(fixedFinalCounts.loc[:, fixedFinalCounts.columns[0]])
        print(f'Total Substrates in Final Sort with {fixedSubSeq}: {totalFixedFinalCounts:,}\n\n')

    else:
        print(f'File not found:\n     {filePath}'
              f'\n\nWe will load the substrate lists and fix the residue(s): {fixedSubSeq}\n\n')

        # Load Data: Final Sort
        finalSubstrates, totalFinalSubs = ngs.loadSubstrates(filePath=inFilePath,
                                                             fileNames=inFinalSortFileNames,
                                                             fileType='Final Sort',
                                                             printLoadedData=inPrintCounts,
                                                             printNumber=inPrintSubstrateNumber)

        # Fix AA in substrate
        fixedFinalSubs, totalFixedFinalSubstrates = ngs.fixResidue(substrates=finalSubstrates,
                                                                   fixedAA=inFixedResidue,
                                                                   fixedPosition=inFixedPosition,
                                                                   fixedString=fixedSubSeq, 
                                                                   printNumber=inPrintSubstrateNumber,
                                                                   sortType='Final Sort')

        # Save the fixed substrate list
        saveFileName = f'fixedSubs_{inEnzymeName}_FinalSort_Fixed_{fixedSubSeq}'
        if '/' in inFilePath:
            savePath = inSavePath + '/' + saveFileName
        else:
            savePath = inSavePath + '\\' + saveFileName
        with open(savePath, 'wb') as file:
            pic.dump(fixedFinalSubs, file)
        print(f'Fixed substrates saved at:\n     {savePath}\n\n')

        # Count fixed substrates
        fixedFinalCounts, totalFixedFinalCounts = ngs.countResidues(substrates=fixedFinalSubs,
                                                        printCounts=inPrintCounts)

        # Save the counted substrate data
        saveFileName = f'counts_{inEnzymeName}_FinalSort_Fixed_{fixedSubSeq}'
        if '/' in inFilePath:
            savePath = inSavePath + '/' + saveFileName
        else:
            savePath = inSavePath + '\\' + saveFileName
        with open(savePath, 'wb') as file:
            pic.dump(fixedFinalCounts, file)

        # Print your save location
        print(f'Counted fixed substrate data saved at:\n     {savePath}\n\n')


    if inFigureEnrichmentMap:
        # Calculate RF
        finalFixedRF = ngs.calculateRF(counts=fixedFinalCounts, N=totalFixedFinalCounts,
                                       fileType='Final Sort', printRF=inPrintRF)

        # Calculate enrichment scores
        enrichmentScores = ngs.calculateEnrichment(initialSortRF=initialRF,
                                                   finalSortRF=finalFixedRF)

        ngs.plotEnrichmentScores(scores=enrichmentScores, figSize=figSizeEM,
                                 figBorders=figBordersEM, title=inTitleEnrichmentMap,
                                 showScores=inFigureEnrichmentScores,
                                 squares=inFigureEnrichmentAsSquares)

    # Plot the data
    if inFigureWeblogoMotif:
        heights, fixedAA, yMax, yMin = ngs.heightsRF(counts=fixedFinalCounts,
                                                     N=totalFixedFinalCounts, invertRF=False)

        # Plot sequence motif
        ngs.plotMotif(data=heights, fixedPosition=fixedAA, bigLettersOnTop=inBigLettersOnTop,
                      figureSize=inFigureSize, figBorders=inFigureBordersMotif,
                      title=inTitleMotif, titleSize=inFigureTitleSize, yAxisLabel=inYLabelMotif,
                      labelSize=inFigureLabelSize, yMax=yMax, yMin=yMin)

    if inFigureNegativeWeblogoMotif:
        heights, fixedAA, yMax, yMin = ngs.heightsRF(counts=fixedFinalCounts,
                                                     N=totalFixedFinalCounts, invertRF=True)

        # Plot sequence motif
        ngs.plotMotif(data=heights, fixedPosition=fixedAA, bigLettersOnTop=inBigLettersOnTop,
                      figureSize=inFigureSize, figBorders=inFigureBordersMotif,
                      title=inTitleMotif, titleSize=inFigureTitleSize, yAxisLabel=inYLabelMotif,
                      labelSize=inFigureLabelSize, yMax=yMax, yMin=yMin)

    if inFigureLogRatioMotif:
        # Determine baseline probabilities
        if inUseCodonProb:
            pType = f'{inCodonSequence} Codon'
            codonProbs = ngs.probabilityAA(codonSeq=inCodonSequence, printProbability=inPrintProb)

            heights, fixedAA, yMax, yMin = ngs.heightsRFRatio(counts=fixedFinalCounts,
                                                              N=totalFixedFinalSubstrates,
                                                              baselineProb=codonProbs,
                                                              baselineType=pType)
        else:
            pType = 'Initial Sort'
            heights, fixedAA, yMax, yMin = ngs.heightsRFRatio(counts=fixedFinalCounts,
                                                              N=totalFixedFinalSubstrates,
                                                              baselineProb=initialRF,
                                                              baselineType=pType)
        # Plot sequence motif
        ngs.plotMotif(data=heights, fixedPosition=fixedAA, bigLettersOnTop=inBigLettersOnTop,
                      figureSize=inFigureSize, figBorders=inFigureBordersMotif,
                      title=inTitleMotif, titleSize=inFigureTitleSize, yAxisLabel=inYLabelMotif,
                      labelSize=inFigureLabelSize, yMax=yMax, yMin=yMin)


    if inRankFixedSubstrates:
        if inRankInitialSort:
            # Load Data: Initial Sort
            initialSubstrates, totalInitialSubs = ngs.loadSubstrates(filePath=inFilePath,
                                                                     fileNames=inInitialSortFileNames,
                                                                     fileType='Initial Sort',
                                                                     printLoadedData=inPrintCounts,
                                                                     printNumber=inPrintSubstrateNumber)

            # Fix AA in substrate
            fixedInitialSubs, totalFixedInitialSubs = ngs.fixResidue(substrates=initialSubstrates,
                                                                     fixedAA=inFixedResidue,
                                                                     fixedPosition=inFixedPosition,
                                                                     fixedString=fixedSubSeq,
                                                                     printNumber=inPrintSubstrateNumber,
                                                                     sortType='Initial Sort')

            ngs.rankFixedSubstrates(substrates=fixedInitialSubs, fixedSequence=fixedSubSeq,
                                    sortType='Initial Sort',
                                    printNumber=inPrintRankedSubstrateNumber)

        fixedSubSeq = ngs.fixSubstrateSequence(fixAA=inFixedResidue, fixPosition=inFixedPosition)

        if '/' in inFilePath:
            filePath = f'{inFilePath}/fixedSubs_{inEnzymeName}_FinalSort_Fixed_{fixedSubSeq}'
        else:
            filePath = f'{inFilePath}\\fixedSubs_{inEnzymeName}_FinalSort_Fixed_{fixedSubSeq}'

        # Verify that all files exist
        if os.path.exists(filePath):
            # print(f'File found at path:\n     {filePath}\n\n')
            # Load the data
            with open(filePath, 'rb') as file:
                fixedFinalSubs = pic.load(file)

            totalFixedFinalSubs = len(fixedFinalSubs)
            # print(f'Total Substrates in Final Sort with {fixedSubSeq}: '
            #       f'{totalFixedFinalSubs:,}\n\n')
        else:
            print(f'File not found:\n     {filePath}')
            sys.exit()

        ngs.rankFixedSubstrates(substrates=fixedFinalSubs, fixedSequence=fixedSubSeq,
                                sortType='Final Sort', printNumber=inPrintRankedSubstrateNumber)


else:
    # Load the data: final sort
    filePaths = []
    if '/' in inFilePath:
        for fileName in inFinalSortFileNames:
            filePaths.append(f'{inFilePath}/counts_{fileName}')
    else:
        for fileName in inFinalSortFileNames:
            filePaths.append(f'{inFilePath}\\counts_{fileName}')

    # Verify that all files exist
    for indexFile, path in enumerate(filePaths):
        if not os.path.exists(path):
            print(f'\033[91mERROR: No file was found at\n     {path}')
            sys.exit()

    if inFigureEnrichmentMap:
        # Load in data from final sort
        finalCounts, totalFinalSubs = ngs.loadCounts(filePath=filePaths,
                                                     files=inFinalSortFileNames,
                                                     printLoadedData=inPrintCounts,
                                                     fileType='Final Sort')

        # Calculate RF
        initialRF = ngs.calculateRF(counts=initialCounts, N=totalInitialSubs,
                                    fileType='Initial Sort', printRF=inPrintRF)
        finalRF = ngs.calculateRF(counts=finalCounts, N=totalFinalSubs,
                                  fileType='Final Sort', printRF=inPrintRF)

        # Calculate enrichment scores
        enrichmentScores = ngs.calculateEnrichment(initialSortRF=initialRF, finalSortRF=finalRF)
        ngs.plotEnrichmentScores(scores=enrichmentScores, figSize=figSizeEM,
                                 figBorders=figBordersEM, title=inTitleEnrichmentMap,
                                 showScores=inFigureEnrichmentScores,
                                 squares=inFigureEnrichmentAsSquares)
